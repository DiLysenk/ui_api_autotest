{"name": "тест изменение валюты ", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nAssertionError: Ошибка, не найден элемент с названием ₽", "trace": "self = , text = '₽'\n\n    def find_by_text(self, text: str):\n        \"\"\"Метод для верификации элемента по его названию,\n        для нахождения элемента достаточно указать название элемента\"\"\"\n        try:\n            self.is_page_loaded()\n>           element = self.wait.until(EC.visibility_of_element_located((By.XPATH, f'//*[text()=\"{text}\"]')))\n\npageobject/base_page.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"36697cf349259091a9bf4c3087e5dd9d\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7fe4b7598b80>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55b6511e5503 <unknown>\nE       #1 0x55b650f4b938 <unknown>\nE       #2 0x55b650f80f71 <unknown>\nE       #3 0x55b650f81131 <unknown>\nE       #4 0x55b650fb3a94 <unknown>\nE       #5 0x55b650f9e84d <unknown>\nE       #6 0x55b650fb17ea <unknown>\nE       #7 0x55b650f9e713 <unknown>\nE       #8 0x55b650f7423c <unknown>\nE       #9 0x55b650f752e5 <unknown>\nE       #10 0x55b6512128f6 <unknown>\nE       #11 0x55b65122786d <unknown>\nE       #12 0x55b65121467e <unknown>\nE       #13 0x55b6512281f4 <unknown>\nE       #14 0x55b651208592 <unknown>\nE       #15 0x55b6512407b8 <unknown>\nE       #16 0x55b651240938 <unknown>\nE       #17 0x55b65125ac36 <unknown>\nE       #18 0x7ffaa451e609 <unknown>\n\nvenv/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_e2e.TestOpenCart object at 0x7fe4b7e2dd00>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"36697cf349259091a9bf4c3087e5dd9d\")>\n\n    @allure.description(\"\"\"Проверка изменение валюты на главной странице\"\"\")\n    @allure.title('тест изменение валюты ')\n    @pytest.mark.xfail\n    def test_switch_currency_fail(self, browser):\n        p = MainPage(browser)\n        p. \\\n            navigate_to(p.OpenCArt). \\\n            change_currency()\n>       assert p.find_by_text('₽'), \"не должно быть такой валюты\"\n\ntests/tests_opencart/test_e2e.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = , text = '₽'\n\n    def find_by_text(self, text: str):\n        \"\"\"Метод для верификации элемента по его названию,\n        для нахождения элемента достаточно указать название элемента\"\"\"\n        try:\n            self.is_page_loaded()\n            element = self.wait.until(EC.visibility_of_element_located((By.XPATH, f'//*[text()=\"{text}\"]')))\n            self.logger.info(f'найден элемент с текстом {text}')\n            return element\n        except TimeoutException:\n            self.logger.error(f'Ошибка,  не найден элемент с названием {text}')\n>           raise AssertionError(f'Ошибка, не найден элемент с названием {text}')\nE           AssertionError: Ошибка, не найден элемент с названием ₽\n\npageobject/base_page.py:158: AssertionError"}, "description": "Проверка изменение валюты на главной странице", "steps": [{"name": "изменить валюту", "status": "passed", "start": 1643055072776, "stop": 1643055073095}], "attachments": [{"name": "log", "source": "12f50210-2958-4cd2-93fb-4049358359dc-attachment.txt", "type": "text/plain"}], "start": 1643055072570, "stop": 1643055083364, "uuid": "9c55985e-a74a-483b-bc80-4b1a72fd8e3e", "historyId": "3f9bc8459cad86c9d90b46fc051cd9ff", "testCaseId": "c044d722739f04458b6c9ae4e4d57acd", "fullName": "tests.tests_opencart.test_e2e.TestOpenCart#test_switch_currency_fail", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('log_fixture')"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "parentSuite", "value": "tests.tests_opencart"}, {"name": "suite", "value": "test_e2e"}, {"name": "subSuite", "value": "TestOpenCart"}, {"name": "host", "value": "ryzenB450"}, {"name": "thread", "value": "16476-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests_opencart.test_e2e"}]}